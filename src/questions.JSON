[
  {
    "topic_id": 0,
    "topic_name": "Strings",
    "questions": [
      {
        "id": 101,
        "type": "multiple_choice",
        "question": "What is the result of `'Hello' * 3`?",
        "explanation": "The multiplication operator (`*`) concatenates the string with itself the specified number of times.",
        "options": [
          {"text": "HelloHelloHello", "is_correct": true},
          {"text": "Error", "is_correct": false},
          {"text": "Hello 3", "is_correct": false},
          {"text": "'Hello'*3", "is_correct": false}
        ]
      },
      {
        "id": 102,
        "type": "multiple_choice",
        "question": "Strings in Python are mutable (meaning they can be changed after creation).",
        "explanation": "Strings are immutable. Methods like `.replace()` return a new string; they do not change the original.",
        "options": [
          {"text": "True, they can be modified in place.", "is_correct": false},
          {"text": "False, strings are immutable.", "is_correct": true},
          {"text": "True, using slicing assignment.", "is_correct": false},
          {"text": "False, only integers and floats are mutable.", "is_correct": false}
        ]
      },
      {
        "id": 103,
        "type": "multiple_choice",
        "question": "What does the expression `len('Python')` return?",
        "explanation": "The `len()` function returns the number of characters in the string, which is 6 in this case.",
        "options": [
          {"text": "5", "is_correct": false},
          {"text": "6", "is_correct": true},
          {"text": "7", "is_correct": false},
          {"text": "Error", "is_correct": false}
        ]
      },
      {
        "id": 104,
        "type": "multiple_choice",
        "question": "Which of the following creates a multi-line string?",
        "explanation": "Triple quotes (`'''` or `\"\"\"`) are used to create multi-line strings in Python.",
        "options": [
          {"text": "'This is a string'", "is_correct": false},
          {"text": "\"This is a string\"", "is_correct": false},
          {"text": "'''This is a multi-line string'''", "is_correct": true},
          {"text": "\"Multi-line\\nString\"", "is_correct": false}
        ]
      },
      {
        "id": 105,
        "type": "multiple_choice",
        "question": "Which method is used to convert all characters of a string to uppercase?",
        "explanation": "The `.upper()` method returns a new string with all letters converted to uppercase.",
        "options": [
          {"text": ".upper()", "is_correct": true},
          {"text": ".capitalize()", "is_correct": false},
          {"text": ".title()", "is_correct": false},
          {"text": ".casefold()", "is_correct": false}
        ]
      },
      {
        "id": 106,
        "type": "multiple_choice",
        "question": "What will `'Python'.lower()` return?",
        "explanation": "The `.lower()` method returns the string in all lowercase letters.",
        "options": [
          {"text": "PYTHON", "is_correct": false},
          {"text": "python", "is_correct": true},
          {"text": "Python", "is_correct": false},
          {"text": "error", "is_correct": false}
        ]
      },
      {
        "id": 107,
        "type": "multiple_choice",
        "question": "How do you check if a string starts with a specific substring in Python?",
        "explanation": "The `.startswith()` method checks if a string begins with the specified substring.",
        "options": [
          {"text": ".startswith()", "is_correct": true},
          {"text": ".beginwith()", "is_correct": false},
          {"text": ".startswithwith()", "is_correct": false},
          {"text": ".hasprefix()", "is_correct": false}
        ]
      },
      {
        "id": 108,
        "type": "multiple_choice",
        "question": "What is the output of `'  hello  '.strip()`?",
        "explanation": "The `.strip()` method removes whitespace from both ends of the string.",
        "options": [
          {"text": "'hello'", "is_correct": true},
          {"text": "'  hello'", "is_correct": false},
          {"text": "'hello  '", "is_correct": false},
          {"text": "'  hello  '", "is_correct": false}
        ]
      },
      {
        "id": 109,
        "type": "multiple_choice",
        "question": "Which operator is used for string concatenation in Python?",
        "explanation": "The `+` operator concatenates two strings together.",
        "options": [
          {"text": "+", "is_correct": true},
          {"text": "&", "is_correct": false},
          {"text": "*", "is_correct": false},
          {"text": "%", "is_correct": false}
        ]
      },
      {
        "id": 110,
        "type": "multiple_choice",
        "question": "What does `'Hello World'.replace('World', 'Python')` return?",
        "explanation": "The `.replace()` method returns a new string with the specified substring replaced.",
        "options": [
          {"text": "Hello Python", "is_correct": true},
          {"text": "HelloWorld", "is_correct": false},
          {"text": "Python World", "is_correct": false},
          {"text": "Error", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 1,
    "topic_name": "Lists",
    "questions": [
      {
        "id": 201,
        "type": "multiple_choice",
        "question": "Which index would you use to access the number 3 in the list `[1, 2, 3, 4]`?",
        "explanation": "Lists use zero-based indexing. The number 3 is at index 2 (0:1, 1:2, 2:3).",
        "options": [
          {"text": "3", "is_correct": false},
          {"text": "2", "is_correct": true},
          {"text": "-1", "is_correct": false},
          {"text": "4", "is_correct": false}
        ]
      },
      {
        "id": 202,
        "type": "multiple_choice",
        "question": "What is the primary difference between the list methods `.append()` and `.extend()`?",
        "explanation": "`.append()` adds the entire argument as a single element. `.extend()` adds the elements of an iterable (like another list) to the end of the current list.",
        "options": [
          {"text": ".append() returns the list, .extend() does not.", "is_correct": false},
          {"text": ".append() adds one element, .extend() adds all elements from an iterable.", "is_correct": true},
          {"text": ".extend() is faster for single elements.", "is_correct": false},
          {"text": ".extend() works only on tuples.", "is_correct": false}
        ]
      },
      {
        "id": 203,
        "type": "multiple_choice",
        "question": "How do you remove the last element from a list?",
        "explanation": "The `.pop()` method removes and returns the last element if no index is given.",
        "options": [
          {"text": ".remove()", "is_correct": false},
          {"text": ".delete()", "is_correct": false},
          {"text": ".pop()", "is_correct": true},
          {"text": ".discard()", "is_correct": false}
        ]
      },
      {
        "id": 204,
        "type": "multiple_choice",
        "question": "What does `[1, 2, 3] + [4, 5]` return?",
        "explanation": "Using `+` with lists concatenates them into one list.",
        "options": [
          {"text": "[1, 2, 3, 4, 5]", "is_correct": true},
          {"text": "[[1, 2, 3], [4, 5]]", "is_correct": false},
          {"text": "Error", "is_correct": false},
          {"text": "[1, 2, 3] + [4, 5]", "is_correct": false}
        ]
      },
      {
        "id": 205,
        "type": "multiple_choice",
        "question": "How can you create a copy of a list named `items`?",
        "explanation": "Using `items.copy()` or `items[:]` both create shallow copies of a list.",
        "options": [
          {"text": "items.copy()", "is_correct": true},
          {"text": "copy(items)", "is_correct": false},
          {"text": "items.clone()", "is_correct": false},
          {"text": "copylist(items)", "is_correct": false}
        ]
      },
      {
        "id": 206,
        "type": "multiple_choice",
        "question": "What is the output of `len([10, 20, 30, 40])`?",
        "explanation": "The `len()` function returns the number of elements in the list, which is 4 here.",
        "options": [
          {"text": "3", "is_correct": false},
          {"text": "4", "is_correct": true},
          {"text": "5", "is_correct": false},
          {"text": "Error", "is_correct": false}
        ]
      },
      {
        "id": 207,
        "type": "multiple_choice",
        "question": "What does `[1, 2, 3].insert(1, 'a')` produce?",
        "explanation": "The `insert` method adds an element at the specified index. It becomes `[1, 'a', 2, 3]`.",
        "options": [
          {"text": "[1, 'a', 2, 3]", "is_correct": true},
          {"text": "[1, 2, 3, 'a']", "is_correct": false},
          {"text": "['a', 1, 2, 3]", "is_correct": false},
          {"text": "Error", "is_correct": false}
        ]
      },
      {
        "id": 208,
        "type": "multiple_choice",
        "question": "Which method removes the first matching element in a list?",
        "explanation": "The `.remove()` method removes the first occurrence of a value from the list.",
        "options": [
          {"text": ".pop()", "is_correct": false},
          {"text": ".delete()", "is_correct": false},
          {"text": ".remove()", "is_correct": true},
          {"text": ".discard()", "is_correct": false}
        ]
      },
      {
        "id": 209,
        "type": "multiple_choice",
        "question": "How do you reverse a list named `nums` in place?",
        "explanation": "The `.reverse()` method reverses the elements of the list in place.",
        "options": [
          {"text": "nums.reversed()", "is_correct": false},
          {"text": "reversed(nums)", "is_correct": false},
          {"text": "nums.reverse()", "is_correct": true},
          {"text": "nums[::-1]", "is_correct": false}
        ]
      },
      {
        "id": 210,
        "type": "multiple_choice",
        "question": "What is the result of `sum([1, 2, 3])`?",
        "explanation": "The `sum()` function adds all numeric elements of the list, giving 6.",
        "options": [
          {"text": "6", "is_correct": true},
          {"text": "123", "is_correct": false},
          {"text": "[6]", "is_correct": false},
          {"text": "Error", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 2,
    "topic_name": "Dictionaries",
    "questions": [
      {
        "id": 301,
        "type": "multiple_choice",
        "question": "What happens if you try to access a non-existent key in a dictionary using the `.get()` method?",
        "explanation": "`.get()` is the safe way to access keys; it returns `None` by default if the key is not found, preventing a `KeyError`.",
        "options": [
          {"text": "A KeyError is raised.", "is_correct": false},
          {"text": "The string 'None' is returned.", "is_correct": false},
          {"text": "The value None is returned.", "is_correct": true},
          {"text": "The dictionary is automatically updated with the new key.", "is_correct": false}
        ]
      },
      {
        "id": 302,
        "type": "multiple_choice",
        "question": "Dictionary keys must always be strings.",
        "explanation": "Dictionary keys must be immutable types, such as strings, numbers, or tuples.",
        "options": [
          {"text": "True, they must be the 'str' type.", "is_correct": false},
          {"text": "False, any mutable type can be used.", "is_correct": false},
          {"text": "False, any immutable type can be used.", "is_correct": true},
          {"text": "True, but only if values are also strings.", "is_correct": false}
        ]
      },
      {
        "id": 303,
        "type": "multiple_choice",
        "question": "What does the expression `len({'a': 1, 'b': 2, 'c': 3})` return?",
        "explanation": "`len()` returns the number of key-value pairs in a dictionary.",
        "options": [
          {"text": "3", "is_correct": true},
          {"text": "6", "is_correct": false},
          {"text": "1", "is_correct": false},
          {"text": "Error", "is_correct": false}
        ]
      },
      {
        "id": 304,
        "type": "multiple_choice",
        "question": "How do you remove a key-value pair from a dictionary?",
        "explanation": "The `del` keyword can remove a specific key and its value from a dictionary.",
        "options": [
          {"text": "dict.remove(key)", "is_correct": false},
          {"text": "del dict[key]", "is_correct": true},
          {"text": "dict.delete(key)", "is_correct": false},
          {"text": "dict.popitem(key)", "is_correct": false}
        ]
      },
      {
        "id": 305,
        "type": "multiple_choice",
        "question": "Which method removes and returns an element with the given key from a dictionary?",
        "explanation": "The `.pop()` method removes the specified key and returns its value.",
        "options": [
          {"text": ".remove()", "is_correct": false},
          {"text": ".delete()", "is_correct": false},
          {"text": ".pop()", "is_correct": true},
          {"text": ".discard()", "is_correct": false}
        ]
      },
      {
        "id": 306,
        "type": "multiple_choice",
        "question": "What does `dict.keys()` return?",
        "explanation": "`.keys()` returns a view object containing all the keys in the dictionary.",
        "options": [
          {"text": "A list of keys", "is_correct": false},
          {"text": "A view of dictionary keys", "is_correct": true},
          {"text": "A tuple of keys", "is_correct": false},
          {"text": "A generator of keys", "is_correct": false}
        ]
      },
      {
        "id": 307,
        "type": "multiple_choice",
        "question": "How can you merge two dictionaries in Python 3.9+?",
        "explanation": "You can use the `|` operator or `dict.update()` to merge dictionaries in Python 3.9 and above.",
        "options": [
          {"text": "dict1 + dict2", "is_correct": false},
          {"text": "dict1 | dict2", "is_correct": true},
          {"text": "merge(dict1, dict2)", "is_correct": false},
          {"text": "dict1.append(dict2)", "is_correct": false}
        ]
      },
      {
        "id": 308,
        "type": "multiple_choice",
        "question": "What does `{'x': 1, 'y': 2}.values()` return?",
        "explanation": "`.values()` returns a view object of all the values in the dictionary.",
        "options": [
          {"text": "['x', 'y']", "is_correct": false},
          {"text": "dict_items", "is_correct": false},
          {"text": "dict_values([1, 2])", "is_correct": true},
          {"text": "{1, 2}", "is_correct": false}
        ]
      },
      {
        "id": 309,
        "type": "multiple_choice",
        "question": "Which of the following creates an empty dictionary?",
        "explanation": "`{}` creates an empty dictionary, not an empty set.",
        "options": [
          {"text": "()", "is_correct": false},
          {"text": "[]", "is_correct": false},
          {"text": "{}", "is_correct": true},
          {"text": "set()", "is_correct": false}
        ]
      },
      {
        "id": 310,
        "type": "multiple_choice",
        "question": "How do you check if a key `'name'` exists in dictionary `d`?",
        "explanation": "You can use the `'in'` keyword to check for key existence in a dictionary.",
        "options": [
          {"text": "'name' in d", "is_correct": true},
          {"text": "d.has('name')", "is_correct": false},
          {"text": "keyexists(d, 'name')", "is_correct": false},
          {"text": "'name' in d.values()", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 3,
    "topic_name": "List Comprehension",
    "questions": [
      {
        "id": 401,
        "type": "multiple_choice",
        "question": "Which list comprehension correctly generates the list `[0, 1, 4, 9]`?",
        "explanation": "The expression squares the numbers from 0 up to (but not including) 4.",
        "options": [
          {"text": "[x for x in range(4)]", "is_correct": false},
          {"text": "[x**2 for x in range(4)]", "is_correct": true},
          {"text": "[x*x for x in range(1, 5)]", "is_correct": false},
          {"text": "[x**2 for x in range(1, 4)]", "is_correct": false}
        ]
      },
      {
        "id": 402,
        "type": "multiple_choice",
        "question": "You can include an `if` condition within a list comprehension.",
        "explanation": "Yes, an `if` condition filters the elements that will appear in the new list.",
        "options": [
          {"text": "True, for filtering elements.", "is_correct": true},
          {"text": "False, only nested loops are allowed.", "is_correct": false},
          {"text": "True, but only an if-else block.", "is_correct": false},
          {"text": "False, use a separate `filter()` function instead.", "is_correct": false}
        ]
      },
      {
        "id": 403,
        "type": "multiple_choice",
        "question": "Which list comprehension produces a list of even numbers from 0 to 10?",
        "explanation": "The condition filters even numbers within the range.",
        "options": [
          {"text": "[x for x in range(11) if x % 2 == 0]", "is_correct": true},
          {"text": "[x for x in range(11) if x % 2 == 1]", "is_correct": false},
          {"text": "[x for x in range(10)]", "is_correct": false},
          {"text": "[x*2 for x in range(11)]", "is_correct": false}
        ]
      },
      {
        "id": 404,
        "type": "multiple_choice",
        "question": "Which list comprehension creates `['A', 'B', 'C']` from `'abc'`?",
        "explanation": "The comprehension converts each lowercase character to uppercase.",
        "options": [
          {"text": "[c.upper() for c in 'abc']", "is_correct": true},
          {"text": "[upper(c) for c in 'abc']", "is_correct": false},
          {"text": "['abc'.upper()]", "is_correct": false},
          {"text": "[c for c in 'abc'.upper()]", "is_correct": false}
        ]
      },
      {
        "id": 405,
        "type": "multiple_choice",
        "question": "How would you flatten a nested list using list comprehension?",
        "explanation": "You can use a double `for` loop in list comprehension to flatten nested lists.",
        "options": [
          {"text": "[x for row in matrix for x in row]", "is_correct": true},
          {"text": "[row for x in matrix for row in x]", "is_correct": false},
          {"text": "flatten(matrix)", "is_correct": false},
          {"text": "[x for x in matrix]", "is_correct": false}
        ]
      },
      {
        "id": 406,
        "type": "multiple_choice",
        "question": "What does `[x**2 for x in range(3)]` evaluate to?",
        "explanation": "It squares numbers 0, 1, and 2, giving `[0, 1, 4]`.",
        "options": [
          {"text": "[0, 1, 4]", "is_correct": true},
          {"text": "[1, 4, 9]", "is_correct": false},
          {"text": "[2, 4, 6]", "is_correct": false},
          {"text": "Error", "is_correct": false}
        ]
      },
      {
        "id": 407,
        "type": "multiple_choice",
        "question": "Can you use multiple `for` loops in a single list comprehension?",
        "explanation": "Yes, nested loops can be written inside a single list comprehension.",
        "options": [
          {"text": "Yes, multiple for loops are allowed.", "is_correct": true},
          {"text": "No, only one loop per comprehension.", "is_correct": false},
          {"text": "Yes, but only with while loops.", "is_correct": false},
          {"text": "No, use nested comprehensions instead.", "is_correct": false}
        ]
      },
      {
        "id": 408,
        "type": "multiple_choice",
        "question": "Which comprehension converts a list of strings to integers?",
        "explanation": "You can use `int(x)` for each string element.",
        "options": [
          {"text": "[int(x) for x in ['1', '2', '3']]", "is_correct": true},
          {"text": "int(['1', '2', '3'])", "is_correct": false},
          {"text": "[x for x in ['1', '2', '3']]", "is_correct": false},
          {"text": "[float(x) for x in ['1', '2', '3']]", "is_correct": false}
        ]
      },
      {
        "id": 409,
        "type": "multiple_choice",
        "question": "What will happen if the list comprehension contains a syntax error?",
        "explanation": "A `SyntaxError` will be raised at compile time before execution.",
        "options": [
          {"text": "It returns None.", "is_correct": false},
          {"text": "It raises a SyntaxError.", "is_correct": true},
          {"text": "It ignores the error.", "is_correct": false},
          {"text": "It returns an empty list.", "is_correct": false}
        ]
      },
      {
        "id": 410,
        "type": "multiple_choice",
        "question": "Can list comprehensions be used to create a set or dictionary?",
        "explanation": "Yes, using curly braces for sets and key:value pairs for dictionaries.",
        "options": [
          {"text": "Yes, with {} for sets and {k:v} for dictionaries.", "is_correct": true},
          {"text": "No, only lists are supported.", "is_correct": false},
          {"text": "Only sets are supported.", "is_correct": false},
          {"text": "Only dictionaries are supported.", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 4,
    "topic_name": "Sets",
    "questions": [
      {
        "id": 501,
        "type": "multiple_choice",
        "question": "Which method is used to add a single element to a set?",
        "explanation": "The `.add()` method is used to insert one item into a set.",
        "options": [
          {"text": ".append()", "is_correct": false},
          {"text": ".insert()", "is_correct": false},
          {"text": ".add()", "is_correct": true},
          {"text": ".union()", "is_correct": false}
        ]
      },
      {
        "id": 502,
        "type": "multiple_choice",
        "question": "A set is guaranteed to maintain the order in which elements were added.",
        "explanation": "Sets are unordered collections, so the display order is not guaranteed and can change.",
        "options": [
          {"text": "True, since Python 3.7.", "is_correct": false},
          {"text": "False, sets are inherently unordered.", "is_correct": true},
          {"text": "True, but only for sets of strings.", "is_correct": false},
          {"text": "False, this is only true for dictionaries.", "is_correct": false}
        ]
      },
      {
        "id": 503,
        "type": "multiple_choice",
        "question": "What is the result of `{1, 2, 2, 3}`?",
        "explanation": "Sets automatically remove duplicates, so repeated elements appear only once.",
        "options": [
          {"text": "{1, 2, 3}", "is_correct": true},
          {"text": "{1, 2, 2, 3}", "is_correct": false},
          {"text": "[1, 2, 3]", "is_correct": false},
          {"text": "(1, 2, 3)", "is_correct": false}
        ]
      },
      {
        "id": 504,
        "type": "multiple_choice",
        "question": "How do you remove all elements from a set?",
        "explanation": "The `.clear()` method removes all elements from the set.",
        "options": [
          {"text": ".remove()", "is_correct": false},
          {"text": ".discard()", "is_correct": false},
          {"text": ".clear()", "is_correct": true},
          {"text": ".pop()", "is_correct": false}
        ]
      },
      {
        "id": 505,
        "type": "multiple_choice",
        "question": "Which operation finds elements common to two sets?",
        "explanation": "The intersection operation (`&` or `.intersection()`) finds elements present in both sets.",
        "options": [
          {"text": "union", "is_correct": false},
          {"text": "difference", "is_correct": false},
          {"text": "intersection", "is_correct": true},
          {"text": "symmetric_difference", "is_correct": false}
        ]
      },
      {
        "id": 506,
        "type": "multiple_choice",
        "question": "What is the result of `{1,2,3} | {3,4,5}`?",
        "explanation": "The `|` operator performs a union of two sets, returning `{1,2,3,4,5}`.",
        "options": [
          {"text": "{1,2,3,4,5}", "is_correct": true},
          {"text": "{3}", "is_correct": false},
          {"text": "{1,2,5}", "is_correct": false},
          {"text": "Error", "is_correct": false}
        ]
      },
      {
        "id": 507,
        "type": "multiple_choice",
        "question": "How can you check if two sets have no elements in common?",
        "explanation": "Use the `.isdisjoint()` method to check if two sets share no elements.",
        "options": [
          {"text": ".isdisjoint()", "is_correct": true},
          {"text": ".difference()", "is_correct": false},
          {"text": ".unique()", "is_correct": false},
          {"text": ".exclusive()", "is_correct": false}
        ]
      },
      {
        "id": 508,
        "type": "multiple_choice",
        "question": "Which statement creates an empty set?",
        "explanation": "`set()` creates an empty set; `{}` creates an empty dictionary.",
        "options": [
          {"text": "{}", "is_correct": false},
          {"text": "set()", "is_correct": true},
          {"text": "[]", "is_correct": false},
          {"text": "()", "is_correct": false}
        ]
      },
      {
        "id": 509,
        "type": "multiple_choice",
        "question": "How do you remove an element safely from a set without causing an error if it doesn’t exist?",
        "explanation": "The `.discard()` method removes the element if present; otherwise, it does nothing.",
        "options": [
          {"text": ".remove()", "is_correct": false},
          {"text": ".delete()", "is_correct": false},
          {"text": ".discard()", "is_correct": true},
          {"text": ".pop()", "is_correct": false}
        ]
      },
      {
        "id": 510,
        "type": "multiple_choice",
        "question": "What is the result of `{1,2,3} - {2,3,4}`?",
        "explanation": "The `-` operator returns elements in the first set that are not in the second.",
        "options": [
          {"text": "{1}", "is_correct": true},
          {"text": "{4}", "is_correct": false},
          {"text": "{2,3}", "is_correct": false},
          {"text": "{1,4}", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 5,
    "topic_name": "Functions",
    "questions": [
      {
        "id": 601,
        "type": "multiple_choice",
        "question": "What is the term for a value passed into a function when it is called?",
        "explanation": "The value passed during the call is an argument; the name in the function definition is a parameter.",
        "options": [
          {"text": "Parameter", "is_correct": false},
          {"text": "Argument", "is_correct": true},
          {"text": "Attribute", "is_correct": false},
          {"text": "Property", "is_correct": false}
        ]
      },
      {
        "id": 602,
        "type": "multiple_choice",
        "question": "If a Python function doesn't explicitly use the `return` keyword, it returns 0 by default.",
        "explanation": "Functions that reach the end without a `return` statement return `None` by default.",
        "options": [
          {"text": "True, to signify successful execution.", "is_correct": false},
          {"text": "False, it returns the value None.", "is_correct": true},
          {"text": "True, but only if the function takes no arguments.", "is_correct": false},
          {"text": "False, it raises a RuntimeError.", "is_correct": false}
        ]
      },
      {
        "id": 603,
        "type": "multiple_choice",
        "question": "Which keyword is used to define a function in Python?",
        "explanation": "Functions are defined using the `def` keyword.",
        "options": [
          {"text": "define", "is_correct": false},
          {"text": "func", "is_correct": false},
          {"text": "def", "is_correct": true},
          {"text": "lambda", "is_correct": false}
        ]
      },
      {
        "id": 604,
        "type": "multiple_choice",
        "question": "What will `print_hello()` return if it only contains a `print` statement?",
        "explanation": "Functions without `return` statements always return `None`.",
        "options": [
          {"text": "None", "is_correct": true},
          {"text": "The printed text", "is_correct": false},
          {"text": "An empty string", "is_correct": false},
          {"text": "0", "is_correct": false}
        ]
      },
      {
        "id": 605,
        "type": "multiple_choice",
        "question": "Which keyword is used to specify a default value for a parameter?",
        "explanation": "Default parameters are specified by assigning a value in the function definition.",
        "options": [
          {"text": "default", "is_correct": false},
          {"text": "set", "is_correct": false},
          {"text": "static", "is_correct": false},
          {"text": "=", "is_correct": true}
        ]
      },
      {
        "id": 606,
        "type": "multiple_choice",
        "question": "Which function returns the number of arguments a function receives?",
        "explanation": "Using `*args` collects variable numbers of positional arguments, accessible as a tuple.",
        "options": [
          {"text": "You can check len(args) inside the function.", "is_correct": true},
          {"text": "There is a built-in function count_args().", "is_correct": false},
          {"text": "Use num(args).", "is_correct": false},
          {"text": "Functions cannot accept variable arguments.", "is_correct": false}
        ]
      },
      {
        "id": 607,
        "type": "multiple_choice",
        "question": "What is a `lambda` function?",
        "explanation": "Lambda functions are small anonymous functions defined using the `lambda` keyword.",
        "options": [
          {"text": "A named function defined using def.", "is_correct": false},
          {"text": "An anonymous single-expression function.", "is_correct": true},
          {"text": "A generator function.", "is_correct": false},
          {"text": "A recursive function.", "is_correct": false}
        ]
      },
      {
        "id": 608,
        "type": "multiple_choice",
        "question": "What is the scope of a variable defined inside a function?",
        "explanation": "Variables inside a function are local to that function unless declared `global`.",
        "options": [
          {"text": "Global scope", "is_correct": false},
          {"text": "Local scope", "is_correct": true},
          {"text": "Module scope", "is_correct": false},
          {"text": "Class scope", "is_correct": false}
        ]
      },
      {
        "id": 609,
        "type": "multiple_choice",
        "question": "What does the `*` operator do in function parameters?",
        "explanation": "The `*` operator collects extra positional arguments into a tuple.",
        "options": [
          {"text": "It multiplies arguments.", "is_correct": false},
          {"text": "It collects extra positional arguments.", "is_correct": true},
          {"text": "It denotes optional parameters.", "is_correct": false},
          {"text": "It unpacks a dictionary.", "is_correct": false}
        ]
      },
      {
        "id": 610,
        "type": "multiple_choice",
        "question": "What happens if you call a function before defining it?",
        "explanation": "Python executes top to bottom; calling an undefined function raises a `NameError`.",
        "options": [
          {"text": "It returns None.", "is_correct": false},
          {"text": "It raises a NameError.", "is_correct": true},
          {"text": "It executes later automatically.", "is_correct": false},
          {"text": "It creates an empty function.", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 6,
    "topic_name": "OOP (Basics)",
    "questions": [
      {
        "id": 701,
        "type": "multiple_choice",
        "question": "The special method that is called automatically when a new object is created is named what?",
        "explanation": "The `__init__` method is the constructor in Python classes.",
        "options": [
          {"text": "__new__", "is_correct": false},
          {"text": "__create__", "is_correct": false},
          {"text": "__init__", "is_correct": true},
          {"text": "__start__", "is_correct": false}
        ]
      },
      {
        "id": 702,
        "type": "multiple_choice",
        "question": "In Python OOP, what is an 'Instance'?",
        "explanation": "An instance is a specific object built from the class blueprint.",
        "options": [
          {"text": "A blueprint for objects.", "is_correct": false},
          {"text": "The class definition file.", "is_correct": false},
          {"text": "A specific object of a class.", "is_correct": true},
          {"text": "A static method.", "is_correct": false}
        ]
      },
      {
        "id": 703,
        "type": "multiple_choice",
        "question": "Which keyword is used to define a class in Python?",
        "explanation": "Classes are defined using the `class` keyword followed by the class name.",
        "options": [
          {"text": "define", "is_correct": false},
          {"text": "object", "is_correct": false},
          {"text": "class", "is_correct": true},
          {"text": "type", "is_correct": false}
        ]
      },
      {
        "id": 704,
        "type": "multiple_choice",
        "question": "What does the `self` parameter represent in a class method?",
        "explanation": "`self` refers to the current instance of the class.",
        "options": [
          {"text": "The class itself.", "is_correct": false},
          {"text": "A global variable.", "is_correct": false},
          {"text": "The instance of the class.", "is_correct": true},
          {"text": "A reference to the superclass.", "is_correct": false}
        ]
      },
      {
        "id": 705,
        "type": "multiple_choice",
        "question": "What is the purpose of the `__str__` method in a class?",
        "explanation": "The `__str__` method defines how the object is represented as a string when printed.",
        "options": [
          {"text": "To initialize attributes.", "is_correct": false},
          {"text": "To delete an object.", "is_correct": false},
          {"text": "To return a readable string representation of the object.", "is_correct": true},
          {"text": "To compare two objects.", "is_correct": false}
        ]
      },
      {
        "id": 706,
        "type": "multiple_choice",
        "question": "What is an attribute in a Python class?",
        "explanation": "An attribute is a variable that belongs to an instance or class.",
        "options": [
          {"text": "A method inside a class.", "is_correct": false},
          {"text": "A variable stored inside a class or instance.", "is_correct": true},
          {"text": "A private method.", "is_correct": false},
          {"text": "A static function.", "is_correct": false}
        ]
      },
      {
        "id": 707,
        "type": "multiple_choice",
        "question": "Which function returns the class name of an instance?",
        "explanation": "`type(object)` returns the type or class of the given object.",
        "options": [
          {"text": "classof()", "is_correct": false},
          {"text": "get_class()", "is_correct": false},
          {"text": "type()", "is_correct": true},
          {"text": "object()", "is_correct": false}
        ]
      },
      {
        "id": 708,
        "type": "multiple_choice",
        "question": "How can you create an object from a class?",
        "explanation": "You call the class as if it were a function, e.g., `obj = MyClass()`.",
        "options": [
          {"text": "Using create(MyClass)", "is_correct": false},
          {"text": "By importing it.", "is_correct": false},
          {"text": "By calling the class name followed by parentheses.", "is_correct": true},
          {"text": "By using the new operator.", "is_correct": false}
        ]
      },
      {
        "id": 709,
        "type": "multiple_choice",
        "question": "Which special method is called when an object is deleted?",
        "explanation": "The `__del__` method is called when the object is destroyed.",
        "options": [
          {"text": "__destroy__", "is_correct": false},
          {"text": "__delete__", "is_correct": false},
          {"text": "__del__", "is_correct": true},
          {"text": "__exit__", "is_correct": false}
        ]
      },
      {
        "id": 710,
        "type": "multiple_choice",
        "question": "How do you access an instance variable from inside a class?",
        "explanation": "Instance variables are accessed with `self.variable_name`.",
        "options": [
          {"text": "variable_name", "is_correct": false},
          {"text": "self.variable_name", "is_correct": true},
          {"text": "this.variable_name", "is_correct": false},
          {"text": "cls.variable_name", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 7,
    "topic_name": "OOP (Advanced)",
    "questions": [
      {
        "id": 801,
        "type": "multiple_choice",
        "question": "Which OOP principle allows a subclass to inherit methods and attributes from a superclass?",
        "explanation": "Inheritance allows one class to acquire properties and methods of another.",
        "options": [
          {"text": "Polymorphism", "is_correct": false},
          {"text": "Inheritance", "is_correct": true},
          {"text": "Encapsulation", "is_correct": false},
          {"text": "Abstraction", "is_correct": false}
        ]
      },
      {
        "id": 802,
        "type": "multiple_choice",
        "question": "Private methods in a Python class are strictly inaccessible from outside the class.",
        "explanation": "Private methods with double underscores are name-mangled but can still be accessed indirectly.",
        "options": [
          {"text": "True, due to encapsulation.", "is_correct": false},
          {"text": "False, they are name-mangled but accessible.", "is_correct": true},
          {"text": "True, unless accessed via a property.", "is_correct": false},
          {"text": "False, because all methods are public.", "is_correct": false}
        ]
      },
      {
        "id": 803,
        "type": "multiple_choice",
        "question": "Which keyword is used to call a method from a parent class?",
        "explanation": "The `super()` function allows access to the parent class methods.",
        "options": [
          {"text": "parent()", "is_correct": false},
          {"text": "super()", "is_correct": true},
          {"text": "base()", "is_correct": false},
          {"text": "main()", "is_correct": false}
        ]
      },
      {
        "id": 804,
        "type": "multiple_choice",
        "question": "What is method overriding?",
        "explanation": "When a subclass provides its own version of a method defined in its superclass.",
        "options": [
          {"text": "Creating multiple methods with the same name in one class.", "is_correct": false},
          {"text": "Replacing a parent class method in a subclass.", "is_correct": true},
          {"text": "Calling the same method from multiple objects.", "is_correct": false},
          {"text": "Using super() inside a method.", "is_correct": false}
        ]
      },
      {
        "id": 805,
        "type": "multiple_choice",
        "question": "What does polymorphism mean in OOP?",
        "explanation": "Polymorphism allows objects of different classes to be treated as instances of the same class through a common interface.",
        "options": [
          {"text": "Multiple classes can inherit from one parent.", "is_correct": false},
          {"text": "Objects can take on many forms.", "is_correct": true},
          {"text": "A function can have only one form.", "is_correct": false},
          {"text": "Inheritance from multiple parents.", "is_correct": false}
        ]
      },
      {
        "id": 806,
        "type": "multiple_choice",
        "question": "What is encapsulation?",
        "explanation": "Encapsulation is the bundling of data and methods that operate on that data, restricting direct access to some attributes.",
        "options": [
          {"text": "Hiding the implementation details.", "is_correct": true},
          {"text": "Using inheritance.", "is_correct": false},
          {"text": "Combining multiple classes.", "is_correct": false},
          {"text": "Overriding a parent method.", "is_correct": false}
        ]
      },
      {
        "id": 807,
        "type": "multiple_choice",
        "question": "Which method name convention makes an attribute private?",
        "explanation": "Attributes prefixed with double underscores (`__attribute`) become name-mangled, limiting access.",
        "options": [
          {"text": "_attribute", "is_correct": false},
          {"text": "__attribute", "is_correct": true},
          {"text": "attribute__", "is_correct": false},
          {"text": "private attribute", "is_correct": false}
        ]
      },
      {
        "id": 808,
        "type": "multiple_choice",
        "question": "What happens if a subclass does not define an `__init__` method?",
        "explanation": "The parent class’s `__init__` method is called automatically if the subclass does not override it.",
        "options": [
          {"text": "The program crashes.", "is_correct": false},
          {"text": "The superclass’s __init__ method is called.", "is_correct": true},
          {"text": "Nothing happens.", "is_correct": false},
          {"text": "A new __init__ is auto-generated.", "is_correct": false}
        ]
      },
      {
        "id": 809,
        "type": "multiple_choice",
        "question": "Which type of method does not require a class instance to be called?",
        "explanation": "A `@classmethod` can be called on the class itself, not just instances.",
        "options": [
          {"text": "Static method", "is_correct": false},
          {"text": "Class method", "is_correct": true},
          {"text": "Instance method", "is_correct": false},
          {"text": "Private method", "is_correct": false}
        ]
      },
      {
        "id": 810,
        "type": "multiple_choice",
        "question": "What is multiple inheritance?",
        "explanation": "Multiple inheritance means a subclass inherits from more than one superclass.",
        "options": [
          {"text": "A class inherits from itself.", "is_correct": false},
          {"text": "A class inherits from multiple parent classes.", "is_correct": true},
          {"text": "A class has multiple constructors.", "is_correct": false},
          {"text": "A function inherits another function.", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 8,
    "topic_name": "Pathlib",
    "questions": [
      {
        "id": 901,
        "type": "multiple_choice",
        "question": "To get just the filename without the full path using a `Path` object, which attribute do you use?",
        "explanation": "The `.name` attribute returns the final path component (the file or folder name).",
        "options": [
          {"text": ".path", "is_correct": false},
          {"text": ".filename", "is_correct": false},
          {"text": ".name", "is_correct": true},
          {"text": ".file", "is_correct": false}
        ]
      },
      {
        "id": 902,
        "type": "multiple_choice",
        "question": "What does the division operator (`/`) do when used between two `Path` objects (or strings) in Pathlib?",
        "explanation": "The operator is overloaded to correctly construct a new path by joining the segments.",
        "options": [
          {"text": "It performs string division.", "is_correct": false},
          {"text": "It joins the path segments.", "is_correct": true},
          {"text": "It raises a TypeError.", "is_correct": false},
          {"text": "It finds the common root path.", "is_correct": false}
        ]
      },
      {
        "id": 903,
        "type": "multiple_choice",
        "question": "Which method checks if a path exists on disk?",
        "explanation": "The `.exists()` method checks whether the path exists on the filesystem.",
        "options": [
          {"text": ".available()", "is_correct": false},
          {"text": ".exists()", "is_correct": true},
          {"text": ".check()", "is_correct": false},
          {"text": ".is_valid()", "is_correct": false}
        ]
      },
      {
        "id": 904,
        "type": "multiple_choice",
        "question": "Which method creates a new directory using Pathlib?",
        "explanation": "The `.mkdir()` method creates a new directory at the specified path.",
        "options": [
          {"text": ".create_folder()", "is_correct": false},
          {"text": ".make_dir()", "is_correct": false},
          {"text": ".mkdir()", "is_correct": true},
          {"text": ".newdir()", "is_correct": false}
        ]
      },
      {
        "id": 905,
        "type": "multiple_choice",
        "question": "How do you get the file extension using Pathlib?",
        "explanation": "Use the `.suffix` attribute to get the file extension, including the dot (e.g., `'.txt'`).",
        "options": [
          {"text": ".ext", "is_correct": false},
          {"text": ".suffix", "is_correct": true},
          {"text": ".extension", "is_correct": false},
          {"text": ".ending", "is_correct": false}
        ]
      },
      {
        "id": 906,
        "type": "multiple_choice",
        "question": "Which method reads the contents of a text file using a `Path` object?",
        "explanation": "The `.read_text()` method returns the contents of a text file as a string.",
        "options": [
          {"text": ".read_file()", "is_correct": false},
          {"text": ".read_text()", "is_correct": true},
          {"text": ".open().read()", "is_correct": false},
          {"text": ".get_text()", "is_correct": false}
        ]
      },
      {
        "id": 907,
        "type": "multiple_choice",
        "question": "Which method writes text to a file using Pathlib?",
        "explanation": "The `.write_text()` method writes a string to a text file.",
        "options": [
          {"text": ".write()", "is_correct": false},
          {"text": ".save_text()", "is_correct": false},
          {"text": ".write_text()", "is_correct": true},
          {"text": ".put_text()", "is_correct": false}
        ]
      },
      {
        "id": 908,
        "type": "multiple_choice",
        "question": "Which Pathlib attribute gives the directory containing the file?",
        "explanation": "The `.parent` attribute gives the directory that contains the file.",
        "options": [
          {"text": ".root", "is_correct": false},
          {"text": ".dir", "is_correct": false},
          {"text": ".parent", "is_correct": true},
          {"text": ".folder", "is_correct": false}
        ]
      },
      {
        "id": 909,
        "type": "multiple_choice",
        "question": "Which method returns all files and directories inside a folder?",
        "explanation": "The `.iterdir()` method yields all contents of a directory.",
        "options": [
          {"text": ".list()", "is_correct": false},
          {"text": ".dir()", "is_correct": false},
          {"text": ".iterdir()", "is_correct": true},
          {"text": ".walk()", "is_correct": false}
        ]
      },
      {
        "id": 910,
        "type": "multiple_choice",
        "question": "What is the output type of `Path.cwd()`?",
        "explanation": "`Path.cwd()` returns a `Path` object representing the current working directory.",
        "options": [
          {"text": "str", "is_correct": false},
          {"text": "Path", "is_correct": true},
          {"text": "dict", "is_correct": false},
          {"text": "tuple", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 9,
    "topic_name": "Requests Library",
    "questions": [
      {
        "id": 1001,
        "type": "multiple_choice",
        "question": "How do you access the content of a successful HTTP response using the `requests` library?",
        "explanation": "The `.text` attribute contains the content of the response body as a string.",
        "options": [
          {"text": "response.data", "is_correct": false},
          {"text": "response.content()", "is_correct": false},
          {"text": "response.text", "is_correct": true},
          {"text": "response.html", "is_correct": false}
        ]
      },
      {
        "id": 1002,
        "type": "multiple_choice",
        "question": "Which method is used to send data to a server (e.g., submitting a form)?",
        "explanation": "The `POST` method is the standard way to send data to a server.",
        "options": [
          {"text": "requests.get()", "is_correct": false},
          {"text": "requests.pull()", "is_correct": false},
          {"text": "requests.post()", "is_correct": true},
          {"text": "requests.read()", "is_correct": false}
        ]
      },
      {
        "id": 1003,
        "type": "multiple_choice",
        "question": "Which function sends a `GET` request using the `requests` library?",
        "explanation": "`requests.get(url)` sends a `GET` request to the specified URL.",
        "options": [
          {"text": "requests.fetch()", "is_correct": false},
          {"text": "requests.load()", "is_correct": false},
          {"text": "requests.get()", "is_correct": true},
          {"text": "requests.open()", "is_correct": false}
        ]
      },
      {
        "id": 1004,
        "type": "multiple_choice",
        "question": "How can you send query parameters in a `GET` request?",
        "explanation": "Use the `'params'` keyword argument to send query parameters in a `GET` request.",
        "options": [
          {"text": "data={}", "is_correct": false},
          {"text": "params={}", "is_correct": true},
          {"text": "query={}", "is_correct": false},
          {"text": "args={}", "is_correct": false}
        ]
      },
      {
        "id": 1005,
        "type": "multiple_choice",
        "question": "Which attribute gives the status code of a response?",
        "explanation": "`response.status_code` contains the HTTP status code (e.g., 200, 404).",
        "options": [
          {"text": "response.code", "is_correct": false},
          {"text": "response.status", "is_correct": false},
          {"text": "response.status_code", "is_correct": true},
          {"text": "response.result", "is_correct": false}
        ]
      },
      {
        "id": 1006,
        "type": "multiple_choice",
        "question": "How do you send `JSON` data in a `POST` request?",
        "explanation": "Use the `json` parameter, e.g., `requests.post(url, json=data)`.",
        "options": [
          {"text": "requests.post(url, data=data)", "is_correct": false},
          {"text": "requests.post(url, json=data)", "is_correct": true},
          {"text": "requests.post(url, text=data)", "is_correct": false},
          {"text": "requests.post(url, body=data)", "is_correct": false}
        ]
      },
      {
        "id": 1007,
        "type": "multiple_choice",
        "question": "Which attribute returns the binary content of a response?",
        "explanation": "`response.content` returns the raw bytes of the response body.",
        "options": [
          {"text": "response.text", "is_correct": false},
          {"text": "response.json", "is_correct": false},
          {"text": "response.content", "is_correct": true},
          {"text": "response.data", "is_correct": false}
        ]
      },
      {
        "id": 1008,
        "type": "multiple_choice",
        "question": "Which method automatically decodes JSON response content?",
        "explanation": "`response.json()` parses the response as JSON and returns a Python object.",
        "options": [
          {"text": "response.get_json()", "is_correct": false},
          {"text": "response.json()", "is_correct": true},
          {"text": "response.text()", "is_correct": false},
          {"text": "response.decode()", "is_correct": false}
        ]
      },
      {
        "id": 1009,
        "type": "multiple_choice",
        "question": "How can you send headers in a request?",
        "explanation": "Headers are passed as a dictionary to the `headers` parameter.",
        "options": [
          {"text": "headers=[...]", "is_correct": false},
          {"text": "header={...}", "is_correct": false},
          {"text": "headers={...}", "is_correct": true},
          {"text": "meta={...}", "is_correct": false}
        ]
      },
      {
        "id": 1010,
        "type": "multiple_choice",
        "question": "What is the default timeout for a `requests` call if not specified?",
        "explanation": "By default, `requests` has no timeout; it will wait indefinitely unless one is set.",
        "options": [
          {"text": "10 seconds", "is_correct": false},
          {"text": "30 seconds", "is_correct": false},
          {"text": "No timeout by default", "is_correct": true},
          {"text": "60 seconds", "is_correct": false}
        ]
      }
    ]
  },
  {
    "topic_id": 10,
    "topic_name": "JSON Library",
    "questions": [
      {
        "id": 1101,
        "type": "multiple_choice",
        "question": "The `json.loads()` function converts JSON data from which source into a Python object?",
        "explanation": "The 's' in `loads` stands for 'string'; it parses a JSON formatted string.",
        "options": [
          {"text": "A file handle", "is_correct": false},
          {"text": "A network stream", "is_correct": false},
          {"text": "A JSON formatted string", "is_correct": true},
          {"text": "A bytes object", "is_correct": false}
        ]
      },
      {
        "id": 1102,
        "type": "multiple_choice",
        "question": "Python's `json` library can successfully serialize a set directly to a JSON object.",
        "explanation": "JSON does not have a native type for Python sets; attempting to serialize a set will raise a `TypeError`.",
        "options": [
          {"text": "True, because sets are iterable.", "is_correct": false},
          {"text": "False, sets must first be converted to a list or tuple.", "is_correct": true},
          {"text": "True, but only for sets of immutable objects.", "is_correct": false},
          {"text": "False, only dictionaries and lists are supported.", "is_correct": false}
        ]
      },
      {
        "id": 1103,
        "type": "multiple_choice",
        "question": "Which method converts a Python object into a JSON-formatted string?",
        "explanation": "The `json.dumps()` method serializes Python objects into JSON strings.",
        "options": [
          {"text": "json.dump()", "is_correct": false},
          {"text": "json.encode()", "is_correct": false},
          {"text": "json.dumps()", "is_correct": true},
          {"text": "json.convert()", "is_correct": false}
        ]
      },
      {
        "id": 1104,
        "type": "multiple_choice",
        "question": "Which method writes a JSON object directly to a file?",
        "explanation": "The `json.dump()` method writes JSON data to a file-like object.",
        "options": [
          {"text": "json.save()", "is_correct": false},
          {"text": "json.dump()", "is_correct": true},
          {"text": "json.write()", "is_correct": false},
          {"text": "json.export()", "is_correct": false}
        ]
      },
      {
        "id": 1105,
        "type": "multiple_choice",
        "question": "Which method reads JSON data directly from a file?",
        "explanation": "The `json.load()` method reads JSON data from a file handle and converts it into a Python object.",
        "options": [
          {"text": "json.loads()", "is_correct": false},
          {"text": "json.get()", "is_correct": false},
          {"text": "json.load()", "is_correct": true},
          {"text": "json.read()", "is_correct": false}
        ]
      },
      {
        "id": 1106,
        "type": "multiple_choice",
        "question": "What will happen if you try to serialize a Python function using `json.dumps()`?",
        "explanation": "Functions are not serializable; attempting this will raise a `TypeError`.",
        "options": [
          {"text": "It converts it to a string.", "is_correct": false},
          {"text": "It raises a TypeError.", "is_correct": true},
          {"text": "It stores the function name only.", "is_correct": false},
          {"text": "It ignores the function.", "is_correct": false}
        ]
      },
      {
        "id": 1107,
        "type": "multiple_choice",
        "question": "Which Python data type maps directly to a JSON object?",
        "explanation": "Python `dictionaries` map to JSON objects.",
        "options": [
          {"text": "list", "is_correct": false},
          {"text": "tuple", "is_correct": false},
          {"text": "dict", "is_correct": true},
          {"text": "set", "is_correct": false}
        ]
      },
      {
        "id": 1108,
        "type": "multiple_choice",
        "question": "How can you pretty-print JSON output using `json.dumps()`?",
        "explanation": "Use the `indent` parameter to add indentation and improve readability.",
        "options": [
          {"text": "json.dumps(obj, spacing=4)", "is_correct": false},
          {"text": "json.dumps(obj, indent=4)", "is_correct": true},
          {"text": "json.dumps(obj, format=4)", "is_correct": false},
          {"text": "json.dumps(obj, tabs=True)", "is_correct": false}
        ]
      },
      {
        "id": 1109,
        "type": "multiple_choice",
        "question": "What happens if you call `json.loads()` on invalid JSON text?",
        "explanation": "Invalid JSON raises a `json.JSONDecodeError` exception.",
        "options": [
          {"text": "It returns None.", "is_correct": false},
          {"text": "It raises JSONDecodeError.", "is_correct": true},
          {"text": "It corrects the JSON automatically.", "is_correct": false},
          {"text": "It returns an empty dict.", "is_correct": false}
        ]
      },
      {
        "id": 1110,
        "type": "multiple_choice",
        "question": "Which keyword argument in `json.dump()` ensures keys are written in sorted order?",
        "explanation": "The `sort_keys=True` argument sorts dictionary keys alphabetically in the output JSON.",
        "options": [
          {"text": "order_keys", "is_correct": false},
          {"text": "sort_keys", "is_correct": true},
          {"text": "key_sort", "is_correct": false},
          {"text": "sorted", "is_correct": false}
        ]
      }
    ]
  }
]